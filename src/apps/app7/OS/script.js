// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö
const apps = [
    { name: 'Êóß8313LaTeX„Ç®„Éá„Ç£„Çø„Éº', path: 'app/LaTeX/index.html', icon: 'üßÆ' },
    { name: '8313JSX to JS', path: 'app/jsxtojs/index.html', icon: 'üõ†Ô∏è' },
    { name: '8313TS to JS', path: 'app/TStoJS/index.html', icon: 'üîÑ' },
    { name: '8313JS„Åæ„Å®„ÇÅ„ÉÑ„Éº„É´', path: 'app/Webpack/index.html', icon: 'üì¶' },
    { name: '8313HTML„Ç≥„É≥„Éê„Éº„Çø', path: 'app/htmlkonba-ta/index.html', icon: 'üß©' },
    { name: '8313„É≠„Éº„ÉûÂ≠ó„Åã„Çâ„Å≤„Çâ„Åå„Å™', path: 'app/roumazihenkan/index.html', icon: '„ÅÇ' },
    { name: '8313ÊñáÂ≠ó„Ç´„Ç¶„É≥„Éà', path: 'app/mozikaunto/index.html', icon: '‚úçÔ∏è' },
    { name: '8313„Éö„Ç§„É≥„Éà', path: 'app/paint/index.html', icon: 'üé®' },
    { name: 'QR„Ç≥„Éº„Éâ‰ΩúÊàê', path: 'app/QR1/index.html', icon: 'üî≥' },
    { name: 'QR„Ç≥„Éº„ÉâË™≠„ÅøÂèñ„Çä', path: 'app/QR2/index.html', icon: 'üì∑' },
    { name: 'Code128ÁîüÊàê', path: 'app/Code128/index.html', icon: '||| ||' },
    { name: '8313ÊöóÂè∑‰ΩúÊàê', path: 'app/angou/index.html', icon: 'üëÅ' },
    { name: '8313PW', path: 'app/PW/index.html', icon: 'üîë' },
    { name: 'ÊöóÂè∑Âåñ„Çπ„ÉÜ„Ç¨„Éé„Ç∞„É©„Éï„Ç£', path: 'app/suteganogurafi/index.html', icon: 'üñºÔ∏è' },
    { name: 'YoutubeÂüã„ÇÅËæº„Åø', path: 'app/Youtubeumekomi/index.html', icon: '‚ñ∂Ô∏è' },
    { name: '„Çµ„Ç§„ÉàÂüã„ÇÅËæº„ÅøË°®Á§∫', path: 'app/umekomi/index.html', icon: 'üîó' },
    { name: '„Çπ„É≠„ÉÉ„ÉàÂºè‰π±Êï∞„É°„Éº„Ç´„Éº', path: 'app/surottoransuu/index.html', icon: 'üé∞' },
    { name: '„Éê„Éà„É´„Ç¢„É™„Éº„Éä', path: 'app/batoruari-na/index.html', icon: 'RPG' },
    { name: '„Éñ„É©„ÉÉ„ÇØ„Ç∏„É£„ÉÉ„ÇØ', path: 'app/blackjack/index.html', icon: '‚ô§' },
    { name: '„ÉÜ„Éà„É™„Çπ', path: 'app/tetorisu/index.html', icon: 'üïπ' },
    { name: '„Ç™„Çª„É≠', path: 'app/osero/index.html', icon: '‚óè' },



];

// „Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Ç¢„Ç§„Ç≥„É≥„ÅÆÁîüÊàê
function createDesktopIcons() {
    const desktop = document.getElementById('desktop');
    apps.forEach(app => {
        const icon = document.createElement('div');
        icon.className = 'desktop-icon';
        icon.innerHTML = `
            <div class="icon">${app.icon}</div>
            <div class="name">${app.name}</div>
        `;
        icon.addEventListener('dblclick', () => createWindow(app));
        desktop.appendChild(icon);
    });
}

// „Ç¶„Ç£„É≥„Éâ„Ç¶ÁÆ°ÁêÜ
let activeWindow = null;
let windows = new Set();
let zIndex = 1000;

function createWindow(app) {
    const windowsContainer = document.getElementById('windows-container');
    const window = document.createElement('div');
    window.className = 'window';
    window.style.top = '50px';
    window.style.left = '50px';
    window.style.width = '600px';
    window.style.height = '400px';
    window.style.zIndex = zIndex++;

    window.innerHTML = `
        <div class="window-titlebar">
            <span class="window-title">${app.name}</span>
            <div class="window-controls">
                <button class="window-button minimize">‚îÄ</button>
                <button class="window-button maximize">‚ñ°</button>
                <button class="window-button close">√ó</button>
            </div>
        </div>
        <div class="window-content">
            <iframe src="${app.path}"></iframe>
        </div>
        <div class="window-resize"></div>
    `;

    windowsContainer.appendChild(window);
    windows.add(window);
    makeWindowActive(window);
    addWindowToTaskbar(window, app);
    setupWindowControls(window);
    setupWindowDrag(window);
    setupWindowResize(window);
}

// „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆ„Éâ„É©„ÉÉ„Ç∞Ê©üËÉΩ
function setupWindowDrag(window) {
    const titlebar = window.querySelector('.window-titlebar');
    let isDragging = false;
    let startX, startY, initialX, initialY;

    titlebar.addEventListener('mousedown', e => {
        if (e.target !== titlebar) return;
        isDragging = true;
        startX = e.clientX;
        startY = e.clientY;
        initialX = window.offsetLeft;
        initialY = window.offsetTop;
        makeWindowActive(window);
    });

    document.addEventListener('mousemove', e => {
        if (!isDragging) return;
        const dx = e.clientX - startX;
        const dy = e.clientY - startY;
        window.style.left = `${initialX + dx}px`;
        window.style.top = `${initialY + dy}px`;
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
    });
}

// „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆ„É™„Çµ„Ç§„Ç∫Ê©üËÉΩ
function setupWindowResize(window) {
    const resizer = window.querySelector('.window-resize');
    let isResizing = false;
    let startX, startY, initialWidth, initialHeight;

    resizer.addEventListener('mousedown', e => {
        isResizing = true;
        startX = e.clientX;
        startY = e.clientY;
        initialWidth = window.offsetWidth;
        initialHeight = window.offsetHeight;
        makeWindowActive(window);
    });

    document.addEventListener('mousemove', e => {
        if (!isResizing) return;
        const dx = e.clientX - startX;
        const dy = e.clientY - startY;
        window.style.width = `${initialWidth + dx}px`;
        window.style.height = `${initialHeight + dy}px`;
    });

    document.addEventListener('mouseup', () => {
        isResizing = false;
    });
}

// „Ç¶„Ç£„É≥„Éâ„Ç¶„Ç≥„É≥„Éà„É≠„Éº„É´ÔºàÊúÄÂ∞èÂåñ„ÄÅÊúÄÂ§ßÂåñ„ÄÅÈñâ„Åò„ÇãÔºâ
function setupWindowControls(window) {
    const minimize = window.querySelector('.minimize');
    const maximize = window.querySelector('.maximize');
    const close = window.querySelector('.close');

    minimize.addEventListener('click', () => {
        window.classList.add('minimized');
        updateTaskbarItem(window);
    });

    maximize.addEventListener('click', () => {
        window.classList.toggle('maximized');
    });

    close.addEventListener('click', () => {
        window.remove();
        windows.delete(window);
        removeFromTaskbar(window);
    });
}

// „Çø„Çπ„ÇØ„Éê„ÉºÁÆ°ÁêÜ
function addWindowToTaskbar(window, app) {
    const runningApps = document.getElementById('running-apps');
    const taskbarItem = document.createElement('button');
    taskbarItem.className = 'taskbar-item active';
    taskbarItem.innerHTML = `
        <span>${app.icon}</span>
        <span>${app.name}</span>
    `;
    
    taskbarItem.addEventListener('click', () => {
        if (window.classList.contains('minimized')) {
            window.classList.remove('minimized');
            makeWindowActive(window);
        } else if (window === activeWindow) {
            window.classList.add('minimized');
        } else {
            makeWindowActive(window);
        }
        updateTaskbarItem(window);
    });

    window.taskbarItem = taskbarItem;
    runningApps.appendChild(taskbarItem);
}

function removeFromTaskbar(window) {
    if (window.taskbarItem) {
        window.taskbarItem.remove();
    }
}

function updateTaskbarItem(window) {
    const taskbarItem = window.taskbarItem;
    if (!taskbarItem) return;

    if (window.classList.contains('minimized')) {
        taskbarItem.classList.remove('active');
    } else {
        taskbarItem.classList.add('active');
    }
}

// „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂåñ
function makeWindowActive(window) {
    if (activeWindow) {
        activeWindow.style.zIndex = 1000;
        activeWindow.taskbarItem?.classList.remove('active');
    }
    window.style.zIndex = zIndex++;
    window.classList.remove('minimized');
    window.taskbarItem?.classList.add('active');
    activeWindow = window;
}

// „Çπ„Çø„Éº„Éà„É°„Éã„É•„Éº
function setupStartMenu() {
    const startButton = document.getElementById('start-button');
    const startMenu = document.getElementById('start-menu');
    const appsGrid = startMenu.querySelector('.apps-grid');

    // „Çπ„Çø„Éº„Éà„É°„Éã„É•„Éº„Å´„Ç¢„Éó„É™„ÇíËøΩÂä†
    apps.forEach(app => {
        const appItem = document.createElement('div');
        appItem.className = 'desktop-icon';
        appItem.innerHTML = `
            <div class="icon">${app.icon}</div>
            <div class="name">${app.name}</div>
        `;
        appItem.addEventListener('click', () => {
            createWindow(app);
            startMenu.classList.add('hidden');
        });
        appsGrid.appendChild(appItem);
    });

    // „Çπ„Çø„Éº„Éà„Éú„Çø„É≥„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà
    startButton.addEventListener('click', () => {
        startMenu.classList.toggle('hidden');
    });

    // Â§ñÂÅ¥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Åü„ÇâÈñâ„Åò„Çã
    document.addEventListener('click', (e) => {
        if (!startMenu.contains(e.target) && !startButton.contains(e.target)) {
            startMenu.classList.add('hidden');
        }
    });
}

// ÊôÇË®à
function updateClock() {
    const clock = document.getElementById('clock');
    const now = new Date();
    const time = now.toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' });
    clock.textContent = time;
}

// ÂàùÊúüÂåñ
function init() {
    createDesktopIcons();
    setupStartMenu();
    setInterval(updateClock, 1000);
    updateClock();
}

// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆËµ∑Âãï
document.addEventListener('DOMContentLoaded', init);